# Create new Data Table with Primary Key and Foreign key in relation to Allergies data table. Medicines column should not be null.
Create Table Data 
(ID INT Primary Key,
Hospital_Name VARCHAR,
Date_of_Admission Date,
Medicines VARCHAR NOTNULL,
Foreign Key (Date_of_Admission), References Allergies(Date_of_Admission);

#Add 3 rows to the table 
INSERT INTO Data (ID, Hospital_Name, Date_of_Admission, Medicines)
Values (1, Sakra, 14/10/2024, Paracetamol)
(2, Rainbow, 20/5/2024, Panadol)
(3, Vivan, 6/6/2024, Tramadol)

# Add another column to the newly created table
ALTER TABLE Data Add Disease;

# Delete the recently added column 
ALTER TABLE Data Drop Disease;

# Rename the table from Data to Hospital Details
ALTER TABLE Data RENAME TO Hospital_Details;

# Rename column Medicines to Medications
ALTER TABLE Data Rename Medicines TO Medications;

# Delete specific rows. Delete record for the patient who used Tramadol drug.
DELETE FROM Hospital_Details
where Medicines = 'Tramadol';

#Remove all rows in data table but retain column names
TRUNCATE TABLE Data;

# Delete all rows in data table by retaining column namnes
DELETE TABLE Hospital_Details;

# Delete the entire data table permanently from SQL server. DROP functionality output cannot be rolled back
DROP TABLE Hospital_Details;

# Create Dummy table same as Hospital_Details (or) insert all columns, rows from Hospital_Details table to Dummy table.
Create TABLE Dummy
AS Select * From Hospital_Details;

# Add rows from Hospital table to Dummy Table
INSERT INTO Dummy2 (ID, Name, date_of_adnission, BMI, Medicines)
select ID, Name, date_of_adnission, BMI, Medicines from Data;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Patients Table : Patient ID, First Name, Last Name, Gender, Birth Date, City, Province ID, Allergies, Height, Weight.
Admission table: Patient ID, Admission Date, Discharge Date, Diagnosis, Doctor ID.
Province Names: Province ID, Province Name.

# Replace all null values in allergies column with NKA. 
UPDATE Patients
SET allergies = 'NKA' where allergies ISNULL;

# Show first name and last name merged into one column to show their full name. 
Hint: Give space between special charecters ' ' to generate space between first name and last name.
SELECT
CONCAT(first_name,' ',last_name) AS full_name
FROM patients;

Or use below formla also for concatenate purpose.
SELECT first_name || ' ' || last_name
FROM patients;

#Show first name, last name, and the full province name of each patient.
SELECT
  first_name,
  last_name,
  province_names.province_name
FROM patients
  left join province_names ON province_names.province_id = patients.province_id;

# Show how many patients have a birth_date with 2010 as the birth year.
SELECT count(patient_id) AS total_patients
FROM patients
WHERE
  year(birth_date) = 2010;

or Use below logic for the same purpose.
SELECT count(first_name) AS total_patients
FROM patients
WHERE
  birth_date >= '2010-01-01'
  AND birth_date <= '2010-12-31'

# Show the first_name, last_name, and height of the patient with the greatest height.
SELECT first_name, last_name, max(height) as Height FROM patients;

# Show the total number of admissions
SELECT count(*) as Total_Admissions FROM admissions;

# Show all the columns from admissions where the patient was admitted and discharged on the same day.
SELECT * FROM admissions
where admission_date = discharge_date;

#Show first name of patients that start with the letter 'C'
SELECT first_name FROM patients
WHERE
  first_name LIKE 'C%'

# Based on the cities that our patients live in, show unique cities that are in province_id 'NS'?
select distinct(city) from patients
where province_id = 'NS';

# Show unique birth years from patients and order them by ascending.
select DISTINCT(YEAR (birth_date)) from patients
order by birth_date asc;

# Show unique first names from the patients table which only occurs once in the list.

# For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. 
#If only 1 person is named 'Leo' then include them in the output.
select distinct(first_name) from patients
group by first_name having count(first_name)=1;

Or use below formula for same purpose
SELECT first_name
FROM (
    SELECT
      first_name,
      count(first_name) AS occurrencies
    FROM patients
    GROUP BY first_name
  )
WHERE occurrencies = 1

# Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.
SELECT patient_id, first_name FROM patients
WHERE first_name LIKE 's%s'
AND len(first_name) >= 6;

# Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'. Primary diagnosis is stored in the admissions table.
SELECT patients.patient_id, patients.first_name, patients.last_name
FROM patients
left join admissions on patients.patient_id = admissions.patient_id
WHERE diagnosis = 'Dementia';

# Display every patient's first_name. Order the list by the length of each name and then by alphabetically.
SELECT first_name from patients 
order by len(first_name), first_name;

# Show the total amount of male patients and the total amount of female patients in the patients table. Display the two results in the same row.
SELECT 
  SUM(Gender = 'M') as male_count, 
  SUM(Gender = 'F') AS female_count
FROM patients;

or use below logic for same purpose
select 
  sum(case when gender = 'M' then 1 end) as male_count,
  sum(case when gender = 'F' then 1 end) as female_count 
from patients;

# Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. 
# Show results ordered ascending by allergies then by first_name then by last_name.
select first_name, last_name, allergies from patients
where allergies in ('Penicillin') or allergies in ('Morphine')
order by allergies, first_name, last_name

# Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.
SELECT patient_id, diagnosis FROM admissions
GROUP BY patient_id, diagnosis
HAVING COUNT(diagnosis) > 1;

# Show the city and the total number of patients in the city.
#Order from most to least patients and then by city name ascending.
SELECT city, COUNT(patient_id) AS num_patients FROM patients
GROUP BY city
ORDER BY num_patients DESC, city;

# Show first name, last name and role of every person that is either patient or doctor. The roles are either "Patient" or "Doctor"
Hint: UNION All does not remove duplicates. This is the difference between full outer join which removes duplicates acros the the tables.
SELECT first_name, last_name, 'Patient' as role FROM patients
    union all
select first_name, last_name, 'Doctor' from doctors;

# Show all allergies ordered by popularity. Remove NULL values from query.
SELECT allergies, count(allergies) from patients
where allergies is not null
group by allergies
order by count(allergies) desc

# We should use Order By clause initially followed by Group by clause. 
#Reverse chronology throws error as the table woud get grouped with data having similar values then only it would accept to get sorted in ascending or descending order.
# Table name is not needed before column names once using JOIN statement comes in place. 
# Above logic happens as the JOIN cluase makes sure which clumn comes from which table. 
So unless there is syntax error, table names needed before using JOIN only. 
select patients.city, province_names.province_name  
from patients
inner join province_names on patients.province_id=province_names.province_id
where gender in ('M') and height > 40
group by allergies having weight>50
order by city;

# Use aggregations before table names followed by column names
select distinct (patients.allergies), count(admissions.diagnosis) from patients 
right join admissions on patients.patient_id=admissions.patient_id;

# Change Column titles of all column names in Observations table
ALTER TABLE observations RENAME COLUMN c1 TO Date;
ALTER TABLE observations RENAME COLUMN c2 TO ID;
ALTER TABLE observations RENAME COLUMN c3 TO Encounter;
ALTER TABLE observations RENAME COLUMN c4 TO Observations_Category;

# Pull top 3 employees who draws highest salary

This is written as inner query to retrive all columns (employee .*) in the employee table based on first line logic. 
The second line represents create unique row for each department and sort salary in descending order.
SELECT employees.*,
       ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS employee_rank
FROM employees;

Now use both outer query and inner query to retieve top 3 highest salaried employees from each department.
SELECT * FROM (
    SELECT employees.*,
           ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) AS employee_rank
    FROM employees) 
WHERE employee_rank <= 3;

# We can get same result by using different logic

Select * From Employees
Order By Salary DESC
LIMIT 3;

# Retrieve the top 5 employees with the highest salary
SELECT *
FROM employees
ORDER BY salary DESC
LIMIT 5;

-------------------------------------------------------------------------------------------------------------------------------

# Pull the details of employee who earns 2nd highest salary in the department.
# Using Row_number as window function in this scenario.

SELECT *
FROM (
    SELECT employees.*,
           ROW_NUMBER() OVER (ORDER BY salary DESC) AS employee_rank
    FROM employees
)
WHERE employee_rank = 2;

Select * From Employees
Order By Salary DESC
LIMIT 1 OFFSET 1;

# Retrieve employees in batches of 5, starting from the 6th employee (i.e., skip the first 5 employees)
SELECT *
FROM employees
ORDER BY salary DESC
LIMIT 5 OFFSET 5;

# In the same scenario, if we give Limit 10 Offset 5, then out of total 15 rows the output results skips first 5 rows 
and pulls the data from row number 6 to row number 14 by skipping first 5 rows.

# In the same logic if we set Limit to 5 and offset to 10, then the final results pull total 5 rows in data table
from row 11 to row 15 by skipping first 10 rows.
-------------------------------------------------------------------------------------------------------------------------------------
# Find employees who draws same salary
Use Dense_Rank as Window function.
SELECT *
FROM (
    SELECT employees.*,
           DENSE_RANK() OVER (ORDER BY salary DESC) AS employee_rank
    FROM employees
)
WHERE employee_rank = 2;

----------------------------------------------------------------------------------------------------------------------------------------
 

# Pull first 10 employees in SQL server.

SELECT TOP 10 * FROM Employees
ORDER BY Salary DESC;

# In ORACLE we should use Row_Number clause to pull same results
-------------------------------------------------------------------------------------------------------------------------

# Identify duplicate records of Employees in employee table

Below is a wrong logic with Where cluase which gives ERROR result.
Select First_Name, Last_Name, Country, Count(*) From Employees
Where Count(*) > 1;

Below is the correct logic with Group By and Having Cluase
Select FirstName, LastName, Country, Count(*) From Employees
Group By FirstName, LastName, Country
Having Count(*) > 1;
----------------------------------------------------------------------------------------------------------------------------
# Delete duplicate records in the table
DELETE FROM Employees
WHERE (FirstName, LastName, Country) IN (
    SELECT FirstName, LastName, Country, Count(*)
    FROM Employees
    GROUP BY FirstName, LastName, Country
    HAVING COUNT(*) > 1
);

--------------------------------------------------------------------------------------------------------------------------

# Delete Duplicate records of employees based on Employee_IDs in Employee table

# First Create CTE (Custom Table Expression) 
Select Employees.*,
Row_Number() Over(Partition By FirstName, LastName, Country Order By EmployeeID) as Row_Number
From Employees;

# Now write the logic
With CTE AS 
(Select Employees.*,
Row_Number() Over(Partition By FirstName, LastName, Country Order By EmployeeID) as Row_Number
From Employees)
Delete From CTE WHERE Row_Number>1;

# Let’s break down the query to understand why we explicitly list the columns instead of using e.* in the Common Table Expression (CTE).

Column Selection in CTE:
In the CTE, we explicitly specify the columns [FirstName], [LastName], and [Country]. 
This is intentional because we want to create a temporary result set with only these specific columns.
By doing so, we ensure that the subsequent DELETE operation affects only these columns and doesn’t inadvertently impact other columns in the table.

# Using e.* in CTE:
While it’s possible to use e.* (which would represent all columns from the Employee table) in the CTE, it’s generally better to be explicit about the columns you’re working with.
Using e.* might lead to unintended consequences if there are additional columns in the Employee table that you don’t want to include in the CTE or affect during the deletion process.
Explicitly listing the columns provides better control over the data you’re manipulating.

SELECT employees.*,
           ROW_NUMBER() OVER (ORDER BY salary DESC) AS employee_rank
FROM employees



# Considerations:
If you want to include all columns from the Employee table in the CTE, you can certainly use e.*. However, be cautious and ensure that all columns are relevant to your task.
If you only need specific columns (as in our example), explicitly listing them is a good practice for clarity and maintainability.
Remember that the choice between specifying individual columns and using e.* depends on your specific requirements and the context of your query

----------------------------------------------------------------------------------------
# How to handle null values

1. Filtering with NULL Values:
Use the IS NULL or IS NOT NULL operators to filter rows based on null values.
Avoid using comparison operators (=, !=, <, >, etc.) with nulls, as they will not work as expected.

2. Coalescing NULL Values:
Use the COALESCE() function to replace nulls with a default value.
For example: SELECT COALESCE(column_name, 'default_value') FROM table_name;

3. Conditional Logic:
Use the CASE statement to handle nulls in a conditional logic.
For example:
SQL

SELECT CASE 
           WHEN column_name IS NULL THEN 'default_value' 
           ELSE column_name 
       END 
FROM table_name;
---------------------------------------------------------------------------------------------------------------------------------
# Write a query to fetch employees who joined in last 30days
The DATEADD function subtracts 30 days from the current date, which is obtained by GETDATE(), to find employees who joined in this period.

Select * From Employees
Where JOINING_DATE >= DATEADD(DAY, -30, GETDATE());

---------------------------------------------------------------------------------------------------------------------------------
1. Replace row level data based on specific single identifier.

update [Vaccines].[dbo].[PATIENT_IDENTIFIERS_DATA]
set DEATH= 'N' where DEATH is null;

2. Replace null values of rows with 2 different values. 
#Rename data as'No' for multiple columns in which only 2 data types are available where 'Y' or N'.

UPDATE [Vaccines].[dbo].[PATIENT_IDENTIFIERS_DATA]
SET 
    LIFE_THREATENING = CASE WHEN LIFE_THREATENING IS NULL THEN 'N' ELSE LIFE_THREATENING END,
    HOSPITALIZATION = CASE WHEN HOSPITALIZATION IS NULL THEN 'N' ELSE HOSPITALIZATION END,
	PROLONGED_HOSPITALIZATION = case when PROLONGED_HOSPITALIZATION is null then 'N' else PROLONGED_HOSPITALIZATION end,
	DISABLITY = case when DISABLITY is null then 'N' else DISABLITY end,
	BIRTH_DEFECT = case when BIRTH_DEFECT is null then 'N' else BIRTH_DEFECT,	
	ALLERGIES_HISTORY = case when ALLERGIES_HISTORY is null then 'None' else ALLERGIES_HISTORY end;

3. Replace the row level data having 3 different values (1, 0, Null) as (Yes, No, Unknown) respectively for a single column.
# Create a new column with 'case when' logic based on the data from old column. Then delete the old column from the table.
# Create new calculated column with strings from old column having integers data.

ALTER TABLE [Vaccines].[dbo].[PATIENT_IDENTIFIERS_DATA]
ADD RECOVERED_FROM_ADVERSE_EVENT VARCHAR(2);

UPDATE [Vaccines].[dbo].[PATIENT_IDENTIFIERS_DATA]
SET RECOVERED_FROM_ADVERSE_EVENT = CASE 
                    WHEN RECOVERED = 1 THEN 'Y'
                    WHEN RECOVERED = 0 THEN 'N'
                    ELSE NULL
                END;

ALTER TABLE [Vaccines].[dbo].[PATIENT_IDENTIFIERS_DATA]
drop column RECOVERED;
----------------------------------------------------------------------------------------------------------------------------
# Display every patient's first_name. Order the list by the length of each name and then by alphabetically. 

SELECT first_name FROM patients
ORDER BY LEN(first_name), first_name;

# ORDER BY LEN(first_name), first_name: The ORDER BY clause sorts the results. Here’s the logic:
# First, it sorts by the length of first_name using LEN(first_name).
# Then, if there are multiple names with the same length, it sorts them alphabetically by first_name.
# So, even though you have two columns in the SELECT clause, the final output only includes the first_name. 
# The LEN(first_name) is used for sorting purposes, not as an additional output column. 

--------------------------------------------------------------------------------------------------------------------------------

# Show the total amount of male patients and the total amount of female patients in the patients table.
Display the two results in the same row.

Approach 1:
SELECT 
  (SELECT count(*) FROM patients WHERE gender='M') AS male_count, 
  (SELECT count(*) FROM patients WHERE gender='F') AS female_count;

Approach 2:-
SELECT 
  SUM(Gender = 'M') as male_count, 
  SUM(Gender = 'F') AS female_count
FROM patients

Approach 3:-
select 
  sum(case when gender = 'M' then 1 end) as male_count,
  sum(case when gender = 'F' then 1 end) as female_count 
from patients;

# Let’s explore the differences between SUM and COUNT in SQL:

# SUM Function:
The SUM() function calculates the total sum of numeric values in a specified column.
It’s used when you want to find the sum of a numeric attribute (e.g., total sales, total quantity, etc.).
For example, if you have a column called Quantity, SUM(Quantity) would give you the total quantity across all rows.
Null values are ignored when using SUM.

# COUNT Function:
The COUNT() function counts the number of rows that match a specified condition.
It’s used to tally rows based on a criterion (e.g., counting male or female patients).
For example, COUNT(*) counts all rows in a table, while COUNT(column_name) counts non-null values in a specific column.
Null values are not counted when using COUNT.

# When to Use Each:
Use SUM when you need to calculate a total (e.g., total sales amount).
Use COUNT when you want to count occurrences (e.g., the number of male or female patients).
Remember that SUM works with numeric values, while COUNT can work with both numeric and non-numeric data.
----------------------------------------------------------------------------------------------------------------------------------
# Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.

select patient_id, diagnosis from admissions
group by patient_id, diagnosis having count(*) >1

# using COUNT(*) counts the total number of rows for each (patient_id, diagnosis) combination.
If a patient has been diagnosed with the same condition multiple times, the count will include all occurrences, even if they are not consecutive.
-------------------------------------------------------------------------------------------------------------------------------------

